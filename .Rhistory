shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
#Load libraries
library(RSocrata)
library(dplyr)
library(utils)
# options switches
options(shiny.error = browser)
options(stringsAsFactors = FALSE)
# to take off limitation of 5k for data load
options(shiny.maxRequestSize = 30 * 1024 ^ 2)
#Load data into data farame
# load data from saved CSV file for speed
inURL = "C:\\Projects\\RProjects\\Socrata4\\Healthy_Aging_DataDB.csv"
data_source <- read.csv(inURL, header = TRUE)
#extract list of classes from data frame into named list "categories"
unique.class <-distinct(select(data_source,Class,ClassId))
categories  <- as.vector(unique.class$ClassId)
names(categories) <- unique.class$Class
# extract list of topics for given classId into named list "topics"
unique.topic <-distinct(select( filter(data_source[order(data_source$TopicId),], ClassId == 'C01') ,Topic,TopicId))
topics  <- as.vector(unique.topic$TopicId)
names(topics) <- unique.topic$Topic
# extract list of Years for given classId into named list "years"
unique.year <-distinct(select( filter(data_source[order(data_source$YearStart),], ClassId == 'C01') ,YearStart))
sorted.year <- unique.year[order(-unique.year$YearStart),]
years <- as.character(sorted.year)
names(years) <- sorted.year
# extract list of states for given classId into named list "states"
unique.state <-distinct(select( filter(data_source[order(data_source$LocationId),], ClassId == 'C01', YearStart =='2014') ,LocationDesc,LocationId))
states  <- as.vector(unique.state$LocationId)
names(states) <- unique.state$LocationDesc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
